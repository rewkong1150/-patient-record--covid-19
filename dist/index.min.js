"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,s=new Array(e.length);t<e.length;t++)s[t]=e[t];return s}}var express=require("express"),app=express(),passport=require("passport"),port=process.env.PORT||80,cors=require("cors"),cookie=require("cookie"),bcrypt=require("bcrypt"),_require=require("express"),json=_require.json,db=require("./database.js"),users=db.users,students={list:[{id:1,fname:"Patomporn",surname:"Kaenchan",major:"CoE",gpa:3}]};require("./passport.js");var router=require("express").Router(),jwt=require("jsonwebtoken");app.use("/api",router),router.use(cors({origin:"http://localhost:3000",credentials:!0})),router.use(express.json()),router.use(express.urlencoded({extended:!1})),router.post("/login",function(n,o,u){passport.authenticate("local",{session:!1},function(e,t,s){if(console.log("Login: ",n.body,t,e,s),e)return u(e);if(t){var r=jwt.sign(t,db.SECRET,{expiresIn:"1d"});return o.setHeader("Set-Cookie",cookie.serialize("token",r,{httpOnly:!0,secure:"development"!==process.env.NODE_ENV,maxAge:3600,sameSite:"strict",path:"/"})),o.statusCode=200,o.json({user:t,token:r})}return o.status(422).json(s)})(n,o,u)}),router.get("/logout",function(e,t){return t.setHeader("Set-Cookie",cookie.serialize("token","",{httpOnly:!0,secure:"development"!==process.env.NODE_ENV,maxAge:-1,sameSite:"strict",path:"/"})),t.statusCode=200,t.json({message:"Logout successful"})}),router.get("/profile",passport.authenticate("jwt",{session:!1}),function(e,t,s){t.send(e.user)}),router.get("/foo",passport.authenticate("jwt",{session:!1}),function(e,t,s){return t.json({message:"foo"})}),router.route("/students").get(function(e,t){return t.json(students)}),router.post("/students",function(e,t){try{var s={};s.id=students.list.length?students.list[students.list.length-1].id+1:1,s.fname=e.body.fname,s.surname=e.body.surname,s.major=e.body.major,s.gpa=e.body.gpa,students={list:[].concat(_toConsumableArray(students.list),[s])},t.json(students)}catch(e){t.json({status:"Add Fail"})}}),router.route("/students/:std_id").get(function(t,e){var s=students.list.findIndex(function(e){return e.id===+t.params.std_id});0<=s?e.json(students.list[s]):e.json({status:"Student Error can't find!"})}).put(function(t,e){var s=students.list.findIndex(function(e){return e.id===+t.params.std_id});0<=s?(students.list[s].fname=t.body.fname,students.list[s].surname=t.body.surname,students.list[s].major=t.body.major,students.list[s].gpa=t.body.gpa,e.json(students)):e.json({status:"Student Error can't find!"})}).delete(function(t,e){0<=students.list.findIndex(function(e){return e.id===+t.params.std_id})?(students.list=students.list.filter(function(e){return e.id!==+t.params.std_id}),e.json(students)):e.json({status:"Student Error can't find!"})}),router.post("/register",function(t,s){var r,n,o,u,a,i;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,r=10,n=t.body,o=n.username,u=n.email,a=n.password,o&&u&&a){e.next=5;break}return e.abrupt("return",s.json({message:"Cannot register with empty string"}));case 5:if(db.checkExistingUser(o)!==db.NOT_FOUND)return e.abrupt("return",s.json({message:"Duplicated user"}));e.next=7;break;case 7:return i=users.users.length?users.users[users.users.length-1].id+1:1,e.next=10,regeneratorRuntime.awrap(bcrypt.hash(a,r));case 10:hash=e.sent,users.users.push({id:i,username:o,password:hash,email:u}),s.status(200).json({message:"Register success"}),e.next=18;break;case 15:e.prev=15,e.t0=e.catch(0),s.status(422).json({message:"Cannot register"});case 18:case"end":return e.stop()}},null,null,[[0,15]])}),router.get("/alluser",function(e,t){return t.json(db.users.users)}),router.get("/",function(e,t,s){t.send("Respond without authentication")}),app.use(function(e,t,s,r){var n=e.status||500;s.status(n),s.json({error:{status:n,message:e.message}})}),app.listen(port,function(){return console.log("Server is running on port ".concat(port))});
//# sourceMappingURL=index.min.js.map
