{"version":3,"sources":["index.js"],"names":["express","require","app","passport","port","process","env","PORT","cors","cookie","bcrypt","json","db","id","fname","surname","major","gpa","router","Router","jwt","students","list","use","origin","credentials","urlencoded","extended","post","req","res","next","authenticate","session","err","user","info","console","log","body","token","sign","SECRET","serialize","httpOnly","secure","NODE_ENV","maxAge","statusCode","get","setHeader","expiresIn","message","status","send","sameSite","route","newStudent","length","concat","_toConsumableArray","item","params","std_id","ID","put","findIndex","filter","SALT_ROUND","_req$body","username","email","password","regeneratorRuntime","async","_context","prev","abrupt","checkExistingUser","NOT_FOUND","users","awrap","hash","sent","push","t0","stop","error","listen"],"mappings":"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","file":"index.min.js","sourcesContent":["\nconst express = require('express'),\n    app = express(),\n    passport = require('passport'),\n    port = process.env.PORT || 80,\n    cors = require('cors'),\n    cookie = require('cookie')\n\nconst bcrypt = require('bcrypt')\nconst { json } = require('express')\n\nconst db = require('./database.js')\nlet users = db.users\n\nlet students = {\n    list: [\n        { id: 1, fname: \"Patomporn\", surname: \"Kaenchan\", major: \"CoE\", gpa: 3.0 }\n    ]\n}\n\nrequire('./passport.js')\n\nconst router = require('express').Router(),\n    jwt = require('jsonwebtoken')\n\napp.use('/api', router)\nrouter.use(cors({ origin: 'http://localhost:3000', credentials: true }))\n// router.use(cors())\nrouter.use(express.json())\nrouter.use(express.urlencoded({ extended: false }))\n\nrouter.post('/login', (req, res, next) => {\n    passport.authenticate('local', { session: false }, (err, user, info) => {\n        console.log('Login: ', req.body, user, err, info)\n        if (err) return next(err)\n        if (user) {\n            const token = jwt.sign(user, db.SECRET, {\n                expiresIn: '1d'\n            })\n            // req.cookie.token = token\n            res.setHeader(\n                \"Set-Cookie\",\n                cookie.serialize(\"token\", token, {\n                    httpOnly: true,\n                    secure: process.env.NODE_ENV !== \"development\",\n                    maxAge: 60 * 60,\n                    sameSite: \"strict\",\n                    path: \"/\",\n                })\n            );\n            res.statusCode = 200\n            return res.json({ user, token })\n        } else\n            return res.status(422).json(info)\n    })(req, res, next)\n})\n\nrouter.get('/logout', (req, res) => {\n    res.setHeader(\n        \"Set-Cookie\",\n        cookie.serialize(\"token\", '', {\n            httpOnly: true,\n            secure: process.env.NODE_ENV !== \"development\",\n            maxAge: -1,\n            sameSite: \"strict\",\n            path: \"/\",\n        })\n    );\n    res.statusCode = 200\n    return res.json({ message: 'Logout successful' })\n})\n\n/* GET user profile. */\nrouter.get('/profile',\n    passport.authenticate('jwt', { session: false }),\n    (req, res, next) => {\n        res.send(req.user)\n    });\n\n/* GET user foo. */\nrouter.get('/foo',\n    passport.authenticate('jwt', { session: false }),\n    (req, res, next) => {\n        return res.json({ message: 'foo' })\n    });\n\n\n    router.route('/students')\n    .get((req, res) => res.json(students))\n\n\nrouter.post('/students',\n    // passport.authenticate('jwt', { session: false }),\n    (req, res) => {\n        try {\n\n            let newStudent = {}\n            newStudent.id = (students.list.length) ? students.list[students.list.length - 1].id + 1 : 1\n            newStudent.fname = req.body.fname;\n            newStudent.surname = req.body.surname;\n            newStudent.major = req.body.major;\n            newStudent.gpa = req.body.gpa;\n\n            students = { \"list\": [...students.list, newStudent] }\n            res.json(students)\n        }\n        catch\n        {\n            res.json({ status: \"Add Fail\" })\n        }\n\n\n\n    })\n    router.route('/students/:std_id')\n    .get((req, res) => {\n\n        let ID = students.list.findIndex( item => (item.id === +req.params.std_id))\n        if(ID >= 0)\n        {\n            res.json(students.list[ID])\n        }\n        else\n        {\n            res.json({status: \"Student Error can't find!\"})\n        }\n\n    })\n\n    .put( (req,res) => { \n\n        let ID = students.list.findIndex( item => ( item.id === +req.params.std_id))\n        \n        if( ID >= 0)\n        {\n            students.list[ID].fname = req.body.fname\n            students.list[ID].surname = req.body.surname\n            students.list[ID].major = req.body.major\n            students.list[ID].gpa = req.body.gpa\n            \n            res.json(students)\n\n\n        }\n        else\n        {\n            res.json({status: \"Student Error can't find!\"})\n        }\n            \n    })\n\n    .delete((req, res) => {\n\n        let ID = students.list.findIndex( item => ( item.id === +req.params.std_id))\n\n        if(ID>=0)\n        {\n            students.list = students.list.filter( item => item.id !== +req.params.std_id)\n            res.json(students)\n        }\n        else\n        {\n            res.json({status: \"Student Error can't find!\"})\n        }\n\n    })\n\n\nrouter.post('/register',\n    async (req, res) => {\n        try {\n            const SALT_ROUND = 10\n            const { username, email, password } = req.body\n            if (!username || !email || !password)\n                return res.json({ message: \"Cannot register with empty string\" })\n            if (db.checkExistingUser(username) !== db.NOT_FOUND)\n                return res.json({ message: \"Duplicated user\" })\n\n            let id = (users.users.length) ? users.users[users.users.length - 1].id + 1 : 1\n            hash = await bcrypt.hash(password, SALT_ROUND)\n            users.users.push({ id, username, password: hash, email })\n            res.status(200).json({ message: \"Register success\" })\n        } catch {\n            res.status(422).json({ message: \"Cannot register\" })\n        }\n    })\n\nrouter.get('/alluser', (req, res) => res.json(db.users.users))\n\nrouter.get('/', (req, res, next) => {\n    res.send('Respond without authentication');\n});\n\n// Error Handler\napp.use((err, req, res, next) => {\n    let statusCode = err.status || 500\n    res.status(statusCode);\n    res.json({\n        error: {\n            status: statusCode,\n            message: err.message,\n        }\n    });\n});\n\n// Start Server\napp.listen(port, () => console.log(`Server is running on port ${port}`))\n\n"]}